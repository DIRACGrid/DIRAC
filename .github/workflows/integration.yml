name: Integration tests

on: [push, pull_request]

jobs:
  Integration:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    if: github.event_name != 'push' || github.repository == 'DIRACGrid/DIRAC'
    timeout-minutes: 45

    env:
      MATRIX_DEFAULT_MYSQL_VER: 5.7
      MATRIX_DEFAULT_HOST_OS: cc7
      MATRIX_DEFAULT_DEPRECATED_FAIL: No
      MATRIX_DEFAULT_USE_NEWTHREADPOOL: default
      MATRIX_DEFAULT_SERVER_USE_M2CRYPTO: Yes
      MATRIX_DEFAULT_CLIENT_USE_M2CRYPTO: Yes

    strategy:
      fail-fast: False
      matrix:
        experimental: [false]
        include:
          ###### MySQL versions
          - MYSQL_VER: 5.6
          # IMPLICIT: - MYSQL_VER: 5.7
          - MYSQL_VER: 8.0
          ###### Host OS
          - HOST_OS: slc6
          # IMPLICIT: - HOST_OS: cc7
          ###### Thread pool
          # IMPLICIT: - USE_NEWTHREADPOOL: default
          - USE_NEWTHREADPOOL: yes
          ###### M2Crypto
          # IMPLICIT: - SERVER_USE_M2CRYPTO: Yes
          #             CLIENT_USE_M2CRYPTO: Yes
          - SERVER_USE_M2CRYPTO: Yes
            CLIENT_USE_M2CRYPTO: No
          - SERVER_USE_M2CRYPTO: No
            CLIENT_USE_M2CRYPTO: Yes
          - SERVER_USE_M2CRYPTO: No
            CLIENT_USE_M2CRYPTO: No
          ###### Fail deprecation
          # IMPLICIT: DEPRECATED_FAIL: No
          - DEPRECATED_FAIL: Yes
            experimental: true


    steps:
    - uses: actions/checkout@v2
    - name: Fail-fast for outdated pipelines
      run: .github/workflows/fail-fast.sh
    - name: Clean up GitHub actions environment
      run: |
        # Prepare wrapper script
        echo "#!/usr/bin/env bash" >> run_in_container
        echo "set -euo pipefail" >> run_in_container
        echo "IFS=\$'\n\t'" >> run_in_container
        echo -n "exec docker exec -w /repo " >> run_in_container
        # Set environment variables
        echo -n "-e HOST_OS=${{ matrix.HOST_OS || env.MATRIX_DEFAULT_HOST_OS }} " >> run_in_container
        echo -n "-e CI_PROJECT_DIR=/repo " >> run_in_container
        echo -n "-e CI_COMMIT_REF_NAME=$GITHUB_REF " >> run_in_container
        echo -n "-e CI_MERGE_REQUEST_TARGET_BRANCH_NAME=$GITHUB_BASE_REF " >> run_in_container
        echo -n "-e CI_REGISTRY_IMAGE=diracgrid " >> run_in_container
        echo -n "-e MYSQL_VER=${{ matrix.MYSQL_VER || env.MATRIX_DEFAULT_MYSQL_VER }} " >> run_in_container
        if [[ "${{ matrix.DEPRECATED_FAIL || env.MATRIX_DEFAULT_DEPRECATED_FAIL }}" != "No" ]]; then echo -n "-e DIRAC_DEPRECATED_FAIL=${{ matrix.DEPRECATED_FAIL || env.MATRIX_DEFAULT_DEPRECATED_FAIL }} " >> run_in_container; fi
        echo -n "-e ES_VER=${{ matrix.ES_VER || env.MATRIX_DEFAULT_ES_VER }} " >> run_in_container
        if [[ "${{ matrix.USE_NEWTHREADPOOL || env.MATRIX_DEFAULT_USE_NEWTHREADPOOL }}" != "default" ]]; then echo -n "-e DIRAC_USE_NEWTHREADPOOL=${{ matrix.USE_NEWTHREADPOOL || env.MATRIX_DEFAULT_USE_NEWTHREADPOOL }} " >> run_in_container; fi
        echo -n "-e SERVER_USE_M2CRYPTO=${{ matrix.SERVER_USE_M2CRYPTO || env.MATRIX_DEFAULT_SERVER_USE_M2CRYPTO }} " >> run_in_container
        echo -n "-e CLIENT_USE_M2CRYPTO=${{ matrix.CLIENT_USE_M2CRYPTO || env.MATRIX_DEFAULT_CLIENT_USE_M2CRYPTO }} " >> run_in_container
        # Finish wrapper script
        echo -n "dirac-testing-host \"\$@\"" >> run_in_container
        chmod +x run_in_container
        # Show the run in container script
        echo "Run in container script is"
        cat run_in_container
    - name: Prepare environment
      run: |
        docker run --name dirac-testing-host -v $PWD:/repo/DIRAC --detach --privileged -v /var/run/docker.sock:/var/run/docker.sock --rm diracgrid/docker-compose-dirac:latest bash -c 'sleep 100000000'
        ./run_in_container bash -c 'source DIRAC/tests/CI/run_docker_setup.sh && prepareEnvironment'
    - name: Install server
      run: ./run_in_container bash -c 'source DIRAC/tests/CI/run_docker_setup.sh && installServer'
    - name: Install client
      run: ./run_in_container bash -c 'source DIRAC/tests/CI/run_docker_setup.sh && installClient'
    - name: Server tests
      run: ./run_in_container bash -c 'source DIRAC/tests/CI/run_docker_setup.sh && testServer'
    - name: Client tests
      run: ./run_in_container bash -c 'source DIRAC/tests/CI/run_docker_setup.sh && testClient'
    - name: Elasticsearch logs
      run: ./run_in_container bash -c 'source DIRAC/tests/CI/run_docker_setup.sh && docker logs elasticsearch'
    - name: Check test status
      run: ./run_in_container bash -c 'source DIRAC/tests/CI/run_docker_setup.sh && checkErrors'
