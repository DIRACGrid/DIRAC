APIs
{
  Proxy
  {
    # Allow download personal proxy
    downloadablePersonalProxy = True
  }
}
Services
{
  Gateway
  {
    Port = 9159
  }
  SystemAdministrator
  {
    Port = 9162
    Authorization
    {
      Default = ServiceAdministrator
      storeHostInfo = Operator
    }
  }
  ##BEGIN ProxyManager:
  # Section to describe ProxyManager service
  # https://dirac.readthedocs.org/en/latest/AdministratorGuide/Systems/Framework/ProxyManager/index.html
  ProxyManager
  {
    Port = 9152
    MaxThreads = 100
    # Flag to use myproxy server
    UseMyProxy = False
    # Description of rules for access to methods
    Authorization
    {
      Default = authenticated
      getProxy = FullDelegation
      getProxy += LimitedDelegation
      getProxy += PrivateLimitedDelegation
      getVOMSProxy = FullDelegation
      getVOMSProxy += LimitedDelegation
      getVOMSProxy += PrivateLimitedDelegation
      getProxyWithToken = FullDelegation
      getProxyWithToken += LimitedDelegation
      getProxyWithToken += PrivateLimitedDelegation
      getVOMSProxyWithToken = FullDelegation
      getVOMSProxyWithToken += LimitedDelegation
      getVOMSProxyWithToken += PrivateLimitedDelegation
      getLogContents = ProxyManagement
      setPersistency = ProxyManagement
    }
  }
  ##END
  ##BEGIN AuthManager:
  # Section to describe AuthManager service
  AuthManager
  {
    Port = 9151
    Authorization
    {
      Default = authenticated
    }
    # Authorization server description
    AuthorizationServer
    {
      # TODO: all links must be calculated in in
      #       DIRAC.FrameworkSystem.private.authorization.AuthServer
      issuer = https://marosvn32.in2p3.fr/DIRAC/auth
      jwks_uri = https://marosvn32.in2p3.fr/DIRAC/auth/jwk
      token_endpoint = https://marosvn32.in2p3.fr/DIRAC/auth/token
      userinfo_endpoint = https://marosvn32.in2p3.fr/DIRAC/auth/userinfo
      clientsinfo_endpoint = https://marosvn32.in2p3.fr/DIRAC/auth/clientsinfo
      registration_endpoint = https://marosvn32.in2p3.fr/DIRAC/auth/register
      authorization_endpoint = https://marosvn32.in2p3.fr/DIRAC/auth/authorization
      response_types_supported = code
      response_types_supported += token
      response_types_supported += device
      response_types_supported += id_token
      response_types_supported += id_token token
      grant_types_supported = code
      grant_types_supported += implicit
      grant_types_supported += refresh_token
      grant_types_supported += authorization_code
      grant_types_supported += urn:ietf:params:oauth:grant-type:device_code
      # It's a list
      code_challenge_methods_supported = S256,
    }
    # Client descriptions, such as a web portal, this data will be taken if it is not in the database
    Clients
    {
      # DIRAC CLI OAuth public client
      # CLI
      # {
      #   issuer = https://marosvn32.in2p3.fr/DIRAC/auth
      #   authority = https://marosvn32.in2p3.fr/DIRAC/auth
      #   client_id = 3f1DAj8z6eNw0E6JGq1VuzRkpWUL9XTxhL86efZwyV
      #   redirect_uri = https://dirac.egi.eu
      #   response_type = device
      # }
      # Here each section is a description of the client
      # WebApp
      # {   
      #   issuer = https://marosvn32.in2p3.fr/DIRAC/auth
      #   authority = https://marosvn32.in2p3.fr/DIRAC/auth
      #   client_id = 1hlUgttap3P9oTSXUwpIT50TVHxCflN3O98uHP217Y
      #   client_secret = 6c91a15c490bd109f66cf9c0c5567825f41d7fc0db82de02
      ###   redirect_uri = https://marosvn32.in2p3.fr/DIRAC/loginComplete
      ###   response_type = code
      #   client_metadata
      #   {
      #     grant_types = authorization_code
      #     grant_types += refresh_token
      #     redirect_uris = https://marosvn32.in2p3.fr/DIRAC
      #     redirect_uris += https://marosvn32.in2p3.fr/DIRAC/loginComplete
      #     response_types = token
      #     response_types += id_token token
      #     response_types += code
      #     token_endpoint_auth_method = client_secret_basic
      #     scope = changeGroup
      #   }
      # }
    }
  }
  ##END
  SecurityLogging
  {
    Port = 9153
    Authorization
    {
      Default = authenticated
    }
  }
  UserProfileManager
  {
    Port = 9155
    Authorization
    {
      Default = authenticated
    }
  }
  Plotting
  {
    Port = 9157
    PlotsLocation = data/plots
    Authorization
    {
      Default = authenticated
      FileTransfer
      {
        Default = authenticated
      }
    }
  }
  BundleDelivery
  {
    Port = 9158
    Authorization
    {
      Default = authenticated
      FileTransfer
      {
        Default = authenticated
      }
    }
  }
  Monitoring
  {
    Port = 9142
    Authorization
    {
      Default = authenticated
      FileTransfer
      {
        Default = authenticated
      }
      queryField = ServiceAdministrator
      tryView = ServiceAdministrator
      saveView = ServiceAdministrator
      deleteView = ServiceAdministrator
      deleteActivity = ServiceAdministrator
      deleteActivities = ServiceAdministrator
      deleteViews = ServiceAdministrator
    }
  }
  Notification
  {
    Port = 9154
    SMSSwitch = sms.switch.ch
    Authorization
    {
      Default = AlarmsManagement
      sendMail = authenticated
      sendSMS = authenticated
      removeNotificationsForUser = authenticated
      markNotificationsAsRead = authenticated
      getNotifications = authenticated
      ping = authenticated
    }
  }
  ComponentMonitoring
  {
    Port = 9190
    Authorization
    {
      Default = ServiceAdministrator
      componentExists = authenticated
      getComponents = authenticated
      hostExists = authenticated
      getHosts = authenticated
      installationExists = authenticated
      getInstallations = authenticated
      updateLog = Operator
    }
  }
  RabbitMQSync
  {
    Port = 9192
    Authorization
    {
      Default = Operator
    }
  }
}
Agents
{
  MyProxyRenewalAgent
  {
    PollingTime = 1800
    MinValidity = 10000
    #The period for which the proxy will be extended. The value is in hours
    ValidityPeriod = 15
  }
  CAUpdateAgent
  {
    PollingTime = 21600
  }
}
