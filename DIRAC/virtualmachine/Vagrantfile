# -*- mode: ruby -*-
# vi: set ft=ruby :


# NOTE: this is WIP
# would provide a VM for DIRAC clients, based on centos7
# host DIRAC code is mounted in /opt/dirac/versions/hostcode
# ../certs (relative to DIRAC code) will be mounted in /home/vagrant/.globus


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "..", "/home/vagrant/hostcode/DIRAC"
  config.vm.synced_folder "../../WebAppDIRAC", "/home/vagrant/hostcode/WebAppDIRAC"
  config.vm.synced_folder "../../certs", "/home/vagrant/.globus"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # WIP: possible conf below, not fully needed

  # config.vm.provision "shell", inline: <<-SHELL
  #   #!/bin/bash

  #   sudo chown vagrant:vagrant hostcode/
  #   ln -s hostcode/DIRAC/ DIRAC
  #   # Create etc dir and link it
  #   mkdir -p /home/vagrant/etc/grid-security/certificates
  #   ln -s /home/vagrant/etc /home/vagrant/hostcode/etc

  #   # Installing DIRAC in /opt/dirac
  #   curl -L -o dirac-install https://raw.githubusercontent.com/DIRACGrid/management/master/dirac-install.py && \
  #   chmod +x dirac-install && \
  #   ./dirac-install -r $DIRAC_VERSION -t client && \
  #   rm dirac-install && \
  #   ln -s /etc/grid-security/certificates/ /opt/dirac/etc/grid-security/certificates

  #   source bashrc

  #   # Create self-signed host certificate from auto-generated CA
  #   WORKDIR /opt/dirac/etc/grid-security
  #   RUN source /opt/dirac/bashrc && openssl genrsa -out hostkey.pem 2048
  #   RUN curl -L -o openssl_config https://raw.githubusercontent.com/DIRACGrid/DIRAC/integration/tests/openssl_config_DIRACDockerDevBox && \
  #       source /opt/dirac/bashrc && \
  #       openssl req -new -x509 -key hostkey.pem -out hostcert.pem -days 365 -config openssl_config && \
  #       cp hostcert.pem certificates/ && \
  #       cp hostkey.pem certificates/
  # SHELL
end
